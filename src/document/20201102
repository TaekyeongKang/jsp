스프링 컨테이너 == IOC 컨테이너 == 컨테이너
	.스프링 빈을 생성, 관리하는 객체
	.* cf) 서블릿 컨테이너에서  HttpServlet 클래스를 상속하여 작성한 서블릿을 관리 하는 것와 유사
			서블릿 컨테이너를 통해 서블릿을 관리할 때 얻을 수 있는 점
				- url을 호출 했을 때 매핑된 서블릿의 service 메소드를 호출 할 수 있다. 
					==> 개발자가 servlet 코드를 직접 실행하지 않는다.
					==> 실행에 대한 제어가 서블릿 컨테이너에게 있다.
					==> 개발자는 servlet 스팩에 맞게 서블릿을 작성만 한다.

					
DI : Dependency Injection  -  의존성 주입
	 의존성을 고려하여 필요한 객체를  setter, 생성자를 통해 제공하여 설정하는 작업
	 reflection 사용 -> 생성돼있는 객체나 메소드에 접근 가능
	           : @Autowired(호환 Type으로 설정 - spring framework), 
	             @Resource(bean의 이름), 
	             @Inject(호환 Type으로 설정 - java 표준)  
	      (보통 회사마다 선호하는 어노테이션이 있음, 세가지 중 한가지로 사용하면 됨)
	 * service 객체에서 필요한  dao 객체를 setter를 통해 주입
	 	ex) <bean id="service" class="....">
	 			<property name="dao" ref="dao"/>
	 		</bean>
	 		
DL : Dependency Lookup - 의존 검색
	 컨테이너로 부터 관리되는 빈을 요청
	 

IOC, DI, DL, AOP 등 스프링에서 자주 언급되는 개념은 스프링에 종속되는 개념이 아니라
디자인 패턴에서 다루는 언어와 관련 없는 일반적인 개념
	


스프링 빈 scope
	기본 값 : singleton
	<bean> 엘레먼트에서 선언한 id, name 별로 객체가 관리된다는 의미
		   class 속성이 동일한 bean이 여러개 존재 할 수 있다. 
		   
	prototype : DL을 할 때 마다 스프링 컨테이너가 새로운 스프링 빈 객체를 생성하여 리턴
				(singleton 처럼 한번 생성 해놓고 재활용 하지 않음)
				거의 사용하지 않음...

디자인 패턴의  singleton : 클래스의 객체가 하나만 생성되도록 강제하는 디자인 패턴 
						생성자를 private로 하여 외부에서의 접근을 막고, getInstance()등의  getter 메소드를 통해 접근하도록 하는 것
						

스프링 빈 속성
lazy-init : 빈 생성 시기 결정
			빈이 필요해지는 시점에 스프링 컨테이너가 해당 스프링 빈을 생성
			default : 스프링 빈이 만들어지는 시점에서 모든 스프링 빈을 생성
init-method , destroy-method : 스프링 빈 생성, 소멸시 초기화, 리소스 해제시 사용
factory-bean, factory-method : 생성자가 아닌 factory 객체를 통해 객체를 생성할 때 
depends-on : 스프링 빈 생성 시 이전에 반드시 생성이 되어야 하는 다른 스프링 빈을 명시 
			  기본적으로 빈들은 생성순서가 관게 없음, 가끔 빈 B가 빈A에 의존할 때는 순서가 중요함 -> depends-on="A" 
			
스프링 빈의 갯수가 많아질 때 
	==> server start ==> 스프링 빈 초기화 ==> 시간이 지연
	
	만약 lazy-init 속성을 true로 설정 할 경우
	해당 빈이 필요할 때 생성 ==> 스프링 컨테이너 생성시 초기화 시간이 단축된다. 

** 오라클  row level locking
 